var ztree;
//生成弹出树形空间参照
#foreach($column in $columns)
    #if($column.refColumn && $column.refType.equalsIgnoreCase("dialogtree"))
    var ztree${column.attrname};
    #end
#end



var vm = new Vue({
	el:'#rrapp',
	data:{
        q:{
            id: 0
        },
		showList: true,
		title: null,
        //用于日期快捷控件
        pickerOptions1: {
            shortcuts: [{
                text: '今天',
                onClick(picker) {
                    picker.$emit('pick', new Date());
                }
            }, {
                text: '昨天',
                onClick(picker) {
                    const date = new Date();
                    date.setTime(date.getTime() - 3600 * 1000 * 24);
                    picker.$emit('pick', date);
                }
            }, {
                text: '一周前',
                onClick(picker) {
                    const date = new Date();
                    date.setTime(date.getTime() - 3600 * 1000 * 24 * 7);
                    picker.$emit('pick', date);
                }
            }]
        },
            //创建参照
        #foreach($column in $refcolumns)
            #if($column.columnName != $pk.columnName)
                #if($column.refType=="combo")
                    ref_${column.refTable}:[],

                #elseif($column.refType=="enum")
                    ref_enum${column.refTable}:[],
                #end
            #end
        #end

        //创建实体类
        ${classname}: {
            #foreach($column in $refcolumns)
                #if($column.columnName != $pk.columnName)
                    ${column.attrname}${column.refColumnName}:"",
                #end
            #end
            #foreach($column in $columns)
                #if($column.columnName != $pk.columnName)
                    ${column.attrname}:""#if($velocityCount != $columns.size()), #end
                #end
            #end

        }
	},
	methods: {
		query: function () {
            vm.reload();
            vm.getLeftTree();
		},
        getLeftTree: function(menuId){
            //加载菜单树
            $.get("../${classname}/select", function(r){
                ztreeLeft = $.fn.zTree.init($("#leftTree"), setting, r.treeList);
                var node2 = ztreeLeft.getNodeByParam("id", vm.${classname}.parentId);
                ztreeLeft.selectNode(node2);

            })
        },
		add: function(){
            var mktime = moment().format("YYYY-MM-DD");
            vm.showList = false;
            vm.title = "新增";
            vm.${classname} = {
            //参照的虚拟字段也必须先声明好,不然饿了么ui组件不能双向绑定
            #foreach($column in $refcolumns)
                #if($column.columnName != $pk.columnName)
                    ${column.attrname}${column.refColumnName}:"",
                #end
            #end
            #foreach($column in $columns)
                #if($column.columnName != $pk.columnName)
                    #if($column.columnName.equalsIgnoreCase('billno'))
                        ${column.attrname}:"*"#if($velocityCount != $columns.size()), #end
                    #elseif ($column.columnName.equalsIgnoreCase('makeuser'))
                        ${column.attrname}:gUserName#if($velocityCount != $columns.size()), #end
                    #elseif ($column.columnName.equalsIgnoreCase('makedate'))
                        ${column.attrname}:mktime#if($velocityCount != $columns.size()), #end
                    #else
                        ${column.attrname}:""#if($velocityCount != $columns.size()), #end
                    #end
                #end
            #end

        };
		},
		update: function (event) {
			var $pk.attrname = getSelectedRow();
			if($pk.attrname == null){
				return ;
			}
			vm.showList = false;
            vm.title = "修改";

            vm.getInfo(${pk.attrname})
		},
		saveOrUpdate: function (event) {
			var url = vm.${classname}.${pk.attrname} == null ? "../${pathName}/save" : "../${pathName}/update";
			$.ajax({
				type: "POST",
			    url: url,
			    data: JSON.stringify(vm.${classname}),
			    success: function(r){
			    	if(r.code === 0){
						alert('操作成功', function(index){
							vm.reload();
						});
					}else{
						alert(r.msg);
					}
				}
			});
		},
		del: function (event) {
			var ${pk.attrname}s = getSelectedRows();
			if(${pk.attrname}s == null){
				return ;
			}

			confirm('确定要删除选中的记录？', function(){
				$.ajax({
					type: "POST",
				    url: "../${pathName}/delete",
				    data: JSON.stringify(${pk.attrname}s),
				    success: function(r){
						if(r.code == 0){
							alert('操作成功', function(index){
								$("#jqGrid").trigger("reloadGrid");
							});
						}else{
							alert(r.msg);
						}
					}
				});
			});
		},
		getInfo: function(${pk.attrname}){
			$.get("../${pathName}/info/"+${pk.attrname}, function(r){
                vm.${classname} = r.${classname};
            });
		},
        //生成参照调用弹出框函数
        #foreach($column in $columns)
            #if($column.refColumn && $column.refType.equalsIgnoreCase("dialog"))
                select${column.attrname}${column.refTable}: function (event) {
                    showrefgrid_${column.refTable}("参照", function (data) {
                        var seldata = data;
                        vm.${classname}.${column.attrname} =seldata['id'];
                        vm.${classname}.${column.attrname}${column.refTable}${column.refColumnName} =seldata['name'];
                    });
                },
            #end
        #end

        //生成参照调用下拉框函数,用来初始化远程数据
        #foreach($column in $refcolumns)
            #if($column.refColumn && $column.refType.equalsIgnoreCase("combo"))
                getRef${column.refTable}: function () {
                    $.get("../${column.refTable}/list?page=1&limit=1000", function (r) {
                        vm.ref_${column.refTable} = r.page.list;
                    });
                },

            #elseif($column.refColumn && $column.refType.equalsIgnoreCase("enum"))
                getRef${column.refTable}: function () {
                    $.get("../enumtable/listone?enumid=${column.refTable}&page=1&limit=1000", function (r) {
                        vm.ref_enum${column.refTable} = r.page.list;
                    });
                },
            #end
        #end
        //生成弹出树形空间参照
        #foreach($column in $columns)
            #if($column.refColumn && $column.refType.equalsIgnoreCase("dialogtree"))

                getRefTree${column.refTable}${column.attrname}: function(menuId){
                    //加载菜单树
                    $.get("../${column.refTable}/select", function(r){
                        ztree${column.attrname} = $.fn.zTree.init($("#refTree${column.refTable}"), setting, r.treeList);
                        var node = ztree${column.attrname}.getNodeByParam("id", vm.${classname}.${column.attrname});
                        ztree${column.attrname}.selectNode(node);
                        vm.${classname}.${column.attrname}${column.refColumnName} = node.name;

                    })
                },

                openRefTree${column.refTable}${column.attrname}: function(){
                    layer.open({
                        type: 1,
                        offset: '50px',
                        skin: 'layui-layer-molv',
                        title: "选择",
                        area: ['300px', '450px'],
                        shade: 0,
                        shadeClose: false,
                        content: jQuery("#treelayer${column.refTable}"),
                        btn: ['确定', '取消'],
                        btn1: function (index) {
                            var node = ztree${column.attrname}.getSelectedNodes();
                            //选择上级菜单
                            vm.${classname}.${column.attrname} = node[0].id;
                            vm.${classname}.${column.attrname}${column.refColumnName} = node[0].name;

                            layer.close(index);
                        }
                    });
                },
            #end
        #end
        menuTree: function(){
            layer.open({
                type: 1,
                offset: '50px',
                skin: 'layui-layer-molv',
                title: "选择",
                area: ['300px', '450px'],
                shade: 0,
                shadeClose: false,
                content: jQuery("#menuLayer"),
                btn: ['确定', '取消'],
                btn1: function (index) {
                    var node = ztree.getSelectedNodes();
                    //选择上级菜单
                    vm.${classname}.parentId = node[0].id;
                    vm.${classname}.parentName = node[0].name;

                    layer.close(index);
                }
            });
        },
		reload: function (event) {
			vm.showList = true;
			var page = $("#jqGrid").jqGrid('getGridParam','page');
			$("#jqGrid").jqGrid('setGridParam',{
                page:page,
                postData:{'id':vm.q.id}
            }).trigger("reloadGrid");
		},
        onClickNode:function(event, treeId, treeNode) {
            if(vm.showList) {
                vm.q.id = treeNode.id;
                vm.reload();
            }

        }
	}
});



var setting = {
    data: {
        simpleData: {
            enable: true,
            idKey: "id",
            pIdKey: "parentId",
            rootPId: -1
        },
        key: {
            url:"nourl"
        }
    },
    callback:{
        onClick:vm.onClickNode
    }
};

$(function () {
    $("#jqGrid").jqGrid({
        url: '../${pathName}/list',
        datatype: "json",
        colModel: [
			#foreach($column in $columns)
				#if($column.columnName == $pk.columnName)
                    { label: '${column.attrname}', name: '${column.attrname}', width: 50, key: true },
				#else
                    { label: '${column.comments}', name: '${column.attrname}', width: 80 }#if($velocityCount != $columns.size()), #end

				#end
			#end
        ],
        viewrecords: true,
        height: 385,
        rowNum: 10,
        rowList : [10,30,50],
        rownumbers: true,
        rownumWidth: 25,
        autowidth: true,
        autoScroll: true,
        shrinkToFit:false,
        multiselect: true,
        pager: "#jqGridPager",
        jsonReader : {
            root: "page.list",
            page: "page.currPage",
            total: "page.totalPage",
            records: "page.totalCount"
        },
        prmNames : {
            page:"page",
            rows:"limit",
            order: "order"
        },
        gridComplete:function(){
            //隐藏grid底部滚动条
            //$("#jqGrid").closest(".ui-jqgrid-bdiv").css({ "overflow-x" : "hidden" });
        }
    });
    //执行调用参照调用下拉框函数,初始化下拉数据
    #foreach($column in $refcolumns)
        #if($column.refColumn && $column.refType.equalsIgnoreCase("combo"))
            vm.getRef${column.refTable}();
        #elseif($column.refColumn && $column.refType.equalsIgnoreCase("enum"))
            vm.getRef${column.refTable}();
        #elseif($column.refColumn && $column.refType.equalsIgnoreCase("dialogtree"))
            vm.getRefTree${column.refTable}${column.attrname}();
        #end
    #end

    vm.getLeftTree();

	initGridHeight();
});