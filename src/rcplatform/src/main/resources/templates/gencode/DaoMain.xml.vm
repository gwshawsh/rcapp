<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="${package}.dao.${className}Dao">

	<select id="queryObject" resultType="${package}.entity.${className}Entity">
		select
		#foreach($column in $columns)
		#if($column.refColumn)
			#if($column.refType!='enum')
               		ifnull((select ${column.refColumnName} from  ${column.refTable} b where a.${column.columnName}=b.${column.refColumnId}),'') as ${column.attrname}${column.refColumnName},
				#else
                    ifnull((select enumvaluename from  enumtable b where a.${column.columnName}=b.enumvalueid and b.enumtype='${column.refTable}'),'') as ${column.attrname}${column.refColumnName},
				#end
		#end
	#end
        a.*

		from ${tableName} a where ${pk.columnName} = #{value}
	</select>

	<select id="queryList" resultType="${package}.entity.${className}Entity">
        select
		#foreach($column in $columns)
			#if($column.refColumn)
				#if($column.refType!='enum')
                    ifnull((select ${column.refColumnName} from  ${column.refTable} b where a.${column.columnName}=b.${column.refColumnId}),'') as ${column.attrname}${column.refColumnName},
				#else
                    ifnull((select enumvaluename from  enumtable b where a.${column.columnName}=b.enumvalueid and b.enumtype='${column.refTable}'),'') as ${column.attrname}${column.refColumnName},
				#end
			#end
		#end
        a.*
        from ${tableName} a
        <where>
			#foreach($column in $columns)
				#if($column.attrname.equalsIgnoreCase("pocessinstanceid"))
                    <if test="pocessinstanceid != null and pocessinstanceid != '' ">
						#if($velocityCount != 1) and #end `pocessinstanceid` = #{pocessinstanceid}
                    </if>
                    <if test="userid != null ">
						#if($velocityCount != 1) and #end (`makeuser`=#{userid} or `pocessinstanceid` in  (select proc_inst_id from v_tasklist where candidate=#{userid} or assignee=#{userid}))
                    </if>
				#else
                    <if test="$column.attrname != null and $column.attrname != '' ">
						#if($velocityCount != 1) and #end `$column.columnName` = #{$column.attrname}
                    </if>
				#end

			#end
        </where>
		order by id desc
        <if test="offset != null and limit != null">
            limit #{offset}, #{limit}
        </if>
	</select>
	
 	<select id="queryTotal" resultType="int">
		select count(*) from ${tableName} 
	</select>
	 
	<insert id="save" parameterType="${package}.entity.${className}Entity"#if($pk.extra == 'auto_increment') useGeneratedKeys="true" keyProperty="$pk.attrname"#end>
		insert into ${tableName}
		(
#foreach($column in $columns)
#if($column.columnName != $pk.columnName || $pk.extra != 'auto_increment')
			`$column.columnName`#if($velocityCount != $columns.size()), #end

#end			
#end
		)
		values
		(
#foreach($column in $columns)
#if($column.columnName != $pk.columnName || $pk.extra != 'auto_increment')
			#{$column.attrname}#if($velocityCount != $columns.size()), #end

#end			
#end
		)
	</insert>
	 
	<update id="update" parameterType="${package}.entity.${className}Entity">
		update ${tableName} 
		<set>
#foreach($column in $columns)
#if($column.columnName != $pk.columnName)
			<if test="$column.attrname != null">`$column.columnName` = #{$column.attrname}#if($velocityCount != $columns.size()), #end</if>
#end
#end
		</set>
		where ${pk.columnName} = #{${pk.attrname}}
	</update>


    <update id="auditBatch">
        update  ${tableName} set billstatus=billstatus+1 where ${pk.columnName} in
        <foreach item="${pk.attrname}" collection="array" open="(" separator="," close=")">
            #{${pk.attrname}}
        </foreach>
    </update>

    <update id="unauditBatch">
        update  ${tableName} set billstatus=billstatus-1 where ${pk.columnName} in
        <foreach item="${pk.attrname}" collection="array" open="(" separator="," close=")">
            #{${pk.attrname}}
        </foreach>
    </update>
	
	<delete id="delete">
		delete from ${tableName} where ${pk.columnName} = #{value}
	</delete>
	
	<delete id="deleteBatch">
		delete from ${tableName} where ${pk.columnName} in 
		<foreach item="${pk.attrname}" collection="array" open="(" separator="," close=")">
			#{${pk.attrname}}
		</foreach>
	</delete>

</mapper>