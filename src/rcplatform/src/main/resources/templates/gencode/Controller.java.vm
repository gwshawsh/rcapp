package ${package}.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;


import com.alibaba.fastjson.JSON;
import com.ruanchuangsoft.platform.controller.AbstractController;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.stereotype.Controller;

import ${package}.entity.${className}Entity;
import ${package}.service.${className}Service;
import com.ruanchuangsoft.platform.utils.PageUtils;
import com.ruanchuangsoft.platform.utils.R;
import org.springframework.web.servlet.ModelAndView;

/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Controller
@RequestMapping("${pathName}")
@Transactional(rollbackFor = {RuntimeException.class,Exception.class})
public class ${className}Controller extends AbstractController {
	@Autowired
	private ${className}Service ${classname}Service;

	@RequestMapping("/${pathName}")
	public String list(){
		return "${pathName}/${pathName}";
	}



    @RequestMapping("/index")
    public ModelAndView index() {

        setViewname("${parent}/${pathName}");
        ModelAndView view = getModelAndView();
//		initModelAndViewI18N(view,keys);
        return view;

    }

	/**
	 * 列表
	 */
	@ResponseBody
	@RequestMapping("/list")
	@RequiresPermissions("${pathName}:list")
	public R list(Integer page, Integer limit,String query){
		Map<String, Object> map = new HashMap<>();
		map.put("offset", (page - 1) * limit);
		map.put("limit", limit);

        if(query!=null&&query.length()>0){
            try {
                String tmpquery =query.replaceAll("&quot;","\"");
				${className}Entity param = JSON.parseObject(tmpquery, ${className}Entity.class);
				#foreach($column in $columns)
        	        map.put("${column.attrname}", param.get${column.attrName}());
                #end

            }catch(Exception e){
                e.printStackTrace();
            }

        }

		//查询列表数据
		List<${className}Entity> ${classname}List = ${classname}Service.queryList(map);
		int total = ${classname}Service.queryTotal(map);

		PageUtils pageUtil = new PageUtils(${classname}List, total, limit, page);

		return R.ok().put("page", pageUtil);
	}


	/**
	 * 信息
	 */
	@ResponseBody
	@RequestMapping("/info/{${pk.attrname}}")
	@RequiresPermissions("${pathName}:info")
	public R info(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}){
		${className}Entity ${classname} = ${classname}Service.queryObject(${pk.attrname});

		return R.ok().put("${classname}", ${classname});
	}

	/**
	 * 保存
	 */
	@ResponseBody
	@RequestMapping("/save")
	@RequiresPermissions("${pathName}:save")
	public R save(@RequestBody ${className}Entity ${classname}){
		${classname}Service.save(${classname});

		return R.ok();
	}

	/**
	 * 修改
	 */
	@ResponseBody
	@RequestMapping("/update")
	@RequiresPermissions("${pathName}:update")
	public R update(@RequestBody ${className}Entity ${classname}){
		${classname}Service.update(${classname});

		return R.ok();
	}

	/**
	 * 删除
	 */
	@ResponseBody
	@RequestMapping("/delete")
	@RequiresPermissions("${pathName}:delete")
	public R delete(@RequestBody ${pk.attrType}[] ${pk.attrname}s){
		${classname}Service.deleteBatch(${pk.attrname}s);

		return R.ok();
	}

}
