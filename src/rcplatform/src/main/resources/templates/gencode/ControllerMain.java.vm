package ${package}.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.ruanchuangsoft.platform.controller.AbstractController;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.stereotype.Controller;

import ${package}.entity.${className}Entity;
import ${package}.service.${className}Service;
import ${package}.entity.${detailClassName}Entity;
import ${package}.service.${detailClassName}Service;

import com.ruanchuangsoft.platform.utils.PageUtils;
import com.ruanchuangsoft.platform.utils.R;
import org.springframework.web.servlet.ModelAndView;

/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Controller
@RequestMapping("${pathName}")
@Transactional(rollbackFor = {RuntimeException.class,Exception.class})
public class ${className}Controller extends AbstractController {
	@Autowired
	private ${className}Service ${classname}Service;

    @Autowired
    private ${detailClassName}Service ${detailclassname}Service;

    @RequestMapping("/${pathName}")
	public String list(){
		return "${pathName}/${pathName}";
	}



    @RequestMapping("/index")
    public ModelAndView index() {

        setViewname("${parent}/${pathName}");
        ModelAndView view = getModelAndView();
//		initModelAndViewI18N(view,keys);
        return view;

    }

	/**
	 * 列表
	 */
	@ResponseBody
	@RequestMapping("/list")
	@RequiresPermissions("${pathName}:list")
	public R list(Integer page, Integer limit){
		Map<String, Object> map = new HashMap<>();
		map.put("offset", (page - 1) * limit);
		map.put("limit", limit);

		//查询列表数据
		List<${className}Entity> ${classname}List = ${classname}Service.queryList(map);
		int total = ${classname}Service.queryTotal(map);

		PageUtils pageUtil = new PageUtils(${classname}List, total, limit, page);

		return R.ok().put("page", pageUtil);
	}

    /**
     * 列表
     */
    @ResponseBody
    @RequestMapping("/listdetail")
    @RequiresPermissions("${pathName}:list")
    public R listdetail(Long formid,Integer page, Integer limit){
        Map<String, Object> map = new HashMap<>();
        map.put("offset", (page - 1) * limit);
        map.put("limit", limit);
        map.put("formid",formid);

        //查询列表数据
        List<${detailClassName}Entity> ${detailclassname}List = ${detailclassname}Service.queryList(map);
        int total = ${detailclassname}Service.queryTotal(map);

        PageUtils pageUtil = new PageUtils(${detailclassname}List, total, limit, page);

        return R.ok().put("page", pageUtil);
    }

	/**
	 * 信息
	 */
	@ResponseBody
	@RequestMapping("/info/{${pk.attrname}}")
	@RequiresPermissions("${pathName}:info")
	public R info(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}){
		${className}Entity ${classname} = ${classname}Service.queryObject(${pk.attrname});

        //查询明细数据
        Map<String, Object> map = new HashMap<>();
        map.put("formid",id);

        List<${detailClassName}Entity> ${detailclassname}List = ${detailclassname}Service.queryList(map);
		${classname}.setDetails(${detailclassname}List );

		return R.ok().put("${classname}", ${classname});
	}

	/**
	 * 保存
	 */
	@ResponseBody
	@RequestMapping("/save")
	@RequiresPermissions("${pathName}:save")
	public R save(@RequestBody ${className}Entity ${classname}){
        if(${classname}.getBillno().equals("*")){
            String billno=getBillNo("**");
			${classname}.setBillno(billno);
            if(${classname}.getDetails()!=null&&${classname}.getDetails().size()>0){
                for(${detailClassName}Entity item:${classname}.getDetails()){
                    item.setBillno(billno);
                }
            }
        }

		${classname}Service.save(${classname});

		return R.ok();
	}

	/**
	 * 修改
	 */
	@ResponseBody
	@RequestMapping("/update")
	@RequiresPermissions("${pathName}:update")
	public R update(@RequestBody ${className}Entity ${classname}){
		${classname}Service.update(${classname});

		return R.ok();
	}

	/**
	 * 删除
	 */
	@ResponseBody
	@RequestMapping("/delete")
	@RequiresPermissions("${pathName}:delete")
	public R delete(@RequestBody ${pk.attrType}[] ${pk.attrname}s){
		${classname}Service.deleteBatch(${pk.attrname}s);

		return R.ok();
	}

    /**
     * 审核
     */
    @ResponseBody
    @RequestMapping("/audit")
    @RequiresPermissions("${pathName}:audit")
    public R audit(@RequestBody ${pk.attrType}[] ${pk.attrname}s){
			${classname}Service.auditBatch(${pk.attrname}s);

        return R.ok();
    }


    /**
     * 反审核
     */
    @ResponseBody
    @RequestMapping("/unaudit")
    @RequiresPermissions("${pathName}:unaudit")
    public R unaudit(@RequestBody ${pk.attrType}[] ${pk.attrname}s){
			${classname}Service.unauditBatch(${pk.attrname}s);

        return R.ok();
    }

}
